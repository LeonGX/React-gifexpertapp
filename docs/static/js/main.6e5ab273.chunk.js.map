{"version":3,"sources":["Components/AddCategory.js","GifGridItem.js","helpers/getGifs.js","GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","categorie","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,mCACA,sBAAMC,SATS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAKlB,SAEI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAjBgB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,e,QCJlBG,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAC/B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNHK,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXN,EADW,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAMR,GAFN,cAEXS,EAFW,gBAGEA,EAAKC,OAHP,uBAGVC,EAHU,EAGVA,KACDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACrB,MAAM,CACFC,GAAGD,EAAIC,GACPhB,MAAMe,EAAIf,MACVC,IAAG,UAACc,EAAIE,cAAL,aAAC,EAAYC,iBAAiBjB,QARxB,kBAaVY,GAbU,4CAAD,sDCKPM,EAAU,SAAC,GAAiB,IAAhBb,EAAe,EAAfA,UASrB,ECXsB,SAACA,GACvB,MAA0BpB,mBAAS,CAC/B0B,KAAK,GACLQ,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAXAC,qBAAU,WACNlB,EAAQC,GACPkB,MAAK,SAAAC,GAAI,OACNH,EAAS,CACLV,KAAKa,EACLL,SAAQ,SAGlB,CAACd,IAGIe,EDPqBK,CAAapB,GAA7BW,EAAZ,EAAOL,KAAYQ,EAAnB,EAAmBA,QAEnB,OACI,sBAAKlB,UAAU,YAAf,UACI,6BAAKI,IACJc,GAAS,mBAAGlB,UAAU,mCAAb,qBACV,6BACKe,EAAOH,KAAI,SAAAa,GACT,OAAO,cAAC,EAAD,eAA+BA,GAAbA,EAAMX,aElBrCY,EAAe,SAAC,GAAgB,EAAftB,UAAgB,IAE1C,EAAgCpB,mBAAS,CAAC,cAA1C,mBAAM2C,EAAN,KAAiB5C,EAAjB,KAKA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACI4C,EAAWf,KAAI,SAAAR,GAAS,OACxB,cAAC,EAAD,CAEAA,UAAWA,GADNA,Y,MCdjBwB,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.6e5ab273.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange=(e)=>{\n        setInputValue(e.target.value)\n    }\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            setCategories(cats=>[inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n    return (\n        <>\n        <form onSubmit={handleSubmit}>\n            \n            <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            />\n        </form>    \n        </>\n    )\n    \n}\nAddCategory.propTypes={\n    setCategories:PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","export const getGifs=async(categorie)=>{\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(categorie)}&api_key=X9PbNwYHE4rTtB2744bKyPed6BbYxPA9&limit=10`\n    const resp=await fetch(url);\n    const {data}=await resp.json();\n    const gifs=data.map(img=>{\n        return{\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n\n    // console.log(gifs)\n    return gifs;\n}","import React from 'react'\n\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from './hooks/useFetchGifs';\n\nexport const GifGrid = ({categorie}) => {\n\n    // const [images, setImages] = useState([])\n    // useEffect(()=>{\n    //     getGifs(categorie)\n    //     .then(setImages)\n    // },[categorie])\n    \n\n    const {data:images,loading}=useFetchGifs(categorie);\n    \n    return (\n        <div className='card-grid'>\n            <h3>{categorie}</h3>\n            {loading&&<p className='animate__animated animate__flash'>Loading</p>}\n            <ul>\n                {images.map(image=>{\n                   return <GifGridItem key={image.id}{...image}/> \n                })}\n            </ul>\n        </div>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs=(categorie)=>{\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    }\n    )\n\n    useEffect(()=>{\n        getGifs(categorie)\n        .then(imgs=>\n            setState({\n                data:imgs,\n                loading:false\n            }\n            ))\n    },[categorie])\n    \n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './Components/AddCategory'\nimport { GifGrid } from './GifGrid'\n\nexport const GifExpertApp = ({categorie}) => {\n    // const categories=['One Punch', 'Samurai X', 'Dragon Ball'];\n    const[categories,setCategories]=useState(['Formula 1'])\n\n    // const handleAdd=()=>{\n    //     setCategories([...categories,'Evangelion'])\n    // }\n    return (\n        <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories}/>\n        <hr />\n        \n        <ol>\n           {categories.map(categorie=>\n            <GifGrid \n            key={categorie}\n            categorie={categorie}/>\n           )}\n        </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp/>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}